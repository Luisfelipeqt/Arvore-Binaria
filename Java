public class BinaryTree {
	
	private Node root;
	
	public BinaryTree() {
		root = null;
	}
	
	public void insert(int data) {
		Node newNode = new Node(data);
		if(root == null) {
			root = newNode;
		}
		else {
			Node current = root;
			Node parent;
			while(true) {
				parent = current;
				if(data < current.getData()) {
					current = current.getLeft();
					if(current == null) {
						parent.setLeft(newNode);
						return;
					}
				}
				else {
					current = current.getRight();
					if(current == null) {
						parent.setRight(newNode);
						return;
					}
				}
			}
		}
	}
	
	public void inOrderTraversal(Node root) {
		if(root != null) {
			inOrderTraversal(root.getLeft());
			System.out.print(root.getData() + " ");
			inOrderTraversal(root.getRight());
		}
	}
	
	public void preOrderTraversal(Node root) {
		if(root != null) {
			System.out.print(root.getData() + " ");
			preOrderTraversal(root.getLeft());
			preOrderTraversal(root.getRight());
		}
	}
	
	public void postOrderTraversal(Node root) {
		if(root != null) {
			postOrderTraversal(root.getLeft());
			postOrderTraversal(root.getRight());
			System.out.print(root.getData() + " ");
		}
	}
	
